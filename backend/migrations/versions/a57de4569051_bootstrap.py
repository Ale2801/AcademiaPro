"""
Revision ID: a57de4569051
Revises: 
Create Date: 2025-09-07 02:27:18.992871

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = 'a57de4569051'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('program',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('level', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('duration_semesters', sa.Integer(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_program_code'), 'program', ['code'], unique=True)
    op.create_table('room',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=False),
    sa.Column('building', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('room_type', sa.Enum('classroom', 'lab', 'auditorium', 'office', name='roomtypeenum'), nullable=False),
    sa.Column('campus', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('floor', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('has_projector', sa.Boolean(), nullable=False),
    sa.Column('has_computers', sa.Boolean(), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_room_code'), 'room', ['code'], unique=True)
    op.create_table('timeslot',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('day_of_week', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('campus', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('comment', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('secondary_email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('document_type', sa.Enum('dni', 'passport', 'other', name='doctypeenum'), nullable=True),
    sa.Column('national_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('gender', sa.Enum('male', 'female', 'other', 'unspecified', name='genderenum'), nullable=True),
    sa.Column('address_line', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('postal_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('emergency_contact_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_role'), 'user', ['role'], unique=False)
    op.create_table('student',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('enrollment_year', sa.Integer(), nullable=False),
    sa.Column('registration_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('program_id', sa.Integer(), nullable=True),
    sa.Column('grade_level', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('section', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('modality', sa.Enum('in_person', 'online', 'hybrid', name='modalityenum'), nullable=True),
    sa.Column('status', sa.Enum('active', 'suspended', 'graduated', 'withdrawn', name='studentstatusenum'), nullable=False),
    sa.Column('admission_date', sa.Date(), nullable=True),
    sa.Column('expected_graduation_date', sa.Date(), nullable=True),
    sa.Column('gpa', sa.Float(), nullable=True),
    sa.Column('current_term', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('guardian_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('guardian_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['program.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_student_registration_number'), 'student', ['registration_number'], unique=False)
    op.create_index(op.f('ix_student_user_id'), 'student', ['user_id'], unique=False)
    op.create_table('subject',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('credits', sa.Integer(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('department', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('level', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('program_id', sa.Integer(), nullable=True),
    sa.Column('hours_per_week', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['program.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subject_code'), 'subject', ['code'], unique=True)
    op.create_table('teacher',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('department', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('hire_date', sa.Date(), nullable=True),
    sa.Column('employment_type', sa.Enum('full_time', 'part_time', 'contract', name='employmenttypeenum'), nullable=True),
    sa.Column('office', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('specialty', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bio', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_teacher_user_id'), 'teacher', ['user_id'], unique=False)
    op.create_table('course',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('term', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('group', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('weekly_hours', sa.Integer(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=True),
    sa.Column('language', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('modality', sa.Enum('in_person', 'online', 'hybrid', name='modalityenum'), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('syllabus_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('location_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['subject_id'], ['subject.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['teacher.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_course_term'), 'course', ['term'], unique=False)
    op.create_table('courseschedule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('timeslot_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], ),
    sa.ForeignKeyConstraint(['timeslot_id'], ['timeslot.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('enrollment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('enrolled_at', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('enrolled', 'dropped', 'completed', 'failed', 'withdrawn', name='enrollmentstatusenum'), nullable=False),
    sa.Column('final_grade', sa.Float(), nullable=True),
    sa.Column('dropped_at', sa.DateTime(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['student.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('evaluation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('scheduled_at', sa.DateTime(), nullable=True),
    sa.Column('max_score', sa.Float(), nullable=False),
    sa.Column('due_date', sa.DateTime(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('attendance',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('enrollment_id', sa.Integer(), nullable=False),
    sa.Column('session_date', sa.Date(), nullable=False),
    sa.Column('present', sa.Boolean(), nullable=False),
    sa.Column('arrival_time', sa.Time(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['enrollment_id'], ['enrollment.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('grade',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('enrollment_id', sa.Integer(), nullable=False),
    sa.Column('evaluation_id', sa.Integer(), nullable=False),
    sa.Column('score', sa.Float(), nullable=False),
    sa.Column('graded_at', sa.DateTime(), nullable=True),
    sa.Column('feedback', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['enrollment_id'], ['enrollment.id'], ),
    sa.ForeignKeyConstraint(['evaluation_id'], ['evaluation.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('grade')
    op.drop_table('attendance')
    op.drop_table('evaluation')
    op.drop_table('enrollment')
    op.drop_table('courseschedule')
    op.drop_index(op.f('ix_course_term'), table_name='course')
    op.drop_table('course')
    op.drop_index(op.f('ix_teacher_user_id'), table_name='teacher')
    op.drop_table('teacher')
    op.drop_index(op.f('ix_subject_code'), table_name='subject')
    op.drop_table('subject')
    op.drop_index(op.f('ix_student_user_id'), table_name='student')
    op.drop_index(op.f('ix_student_registration_number'), table_name='student')
    op.drop_table('student')
    op.drop_index(op.f('ix_user_role'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('timeslot')
    op.drop_index(op.f('ix_room_code'), table_name='room')
    op.drop_table('room')
    op.drop_index(op.f('ix_program_code'), table_name='program')
    op.drop_table('program')
    # ### end Alembic commands ###
